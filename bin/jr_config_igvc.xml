<?xml version="1.0" encoding="UTF-8"?>
<!-- 
    # This is a sample configuration file for the JR ("Junior") middleware.
    # It is recommended that you maintain default settings.
    #
    # Note that several parameters apply per API connection (that is, the
    # settings apply for each communication client) and others
    # apply per Run-Time Engine instance.  The RTE may be started manually
    # prior to connection requests from clients; otherwise, the RTE
    # will be started automatically by the first connecting client.
    #
    # For a complete description, including allowed value ranges,
    # please consult the Jr User's Guide.
-->
<JrXmlConfig>
    
    <!-- 
        The following settings apply for each client connection.  
        # By default, Jr maintains a history buffer of incoming messages for two reasons:
        #  1) To detect duplicate messages
        #  2) To reconstruct large messages that have been parsed into
        #     multiple packets.
        # The history buffer needs to be finite in size, so that excessive
        # memory is not consumed.  The MaxMsgHistory marks the maximum message
        # size that the history is allowed to store at any one time.  The OldMsgTimeout
        # marks an age, in seconds, at which a message is removed from the history.
        # These values may need to be increased for particularly slow connections.
        
        # By default, Junior will detect a message that is received twice at a 
        # particular destination.  This often occurs in complex networks, in which
        # a message may be routed to an end-point over two different paths.  
        # This behavior can be deactived with the DropDuplicateMsgs flag.
        
        # Junior splits large messages into discrete packets for 
        # transport, similar to IP's implementation of MTU (maximum
        # transfer size).  The default value of 4079 is defined by JAUS,
        # and works for most IP and wired serial.  Many 902-928 radios 
        # have smaller buffers, however, requiring that messages are
        # broken up more than JAUS dictates.  The MTU_Size is the number
        # of bytes, excluding the header bytes added by Junior, that
        # may be sent in any single packet.
                
        # It is also possible to configure the maximum number of times to resend 
        # a message marked for Guarenteed Delivery
        # that was not acknowledged by the receiver.  The message is sent a total
        # of (MaxAckNakRetries+1), as the first send is not considered a retry.  
        # AckTimeout is the period, in milliseconds, to wait before resending a message.
    -->
    <API_Configuration 
        MaxMsgHistory="50"
        OldMsgTimeout="3"
        DropDuplicateMsgs="1"    
        MTU_Size = "4079"
        MaxAckNakRetries="3"
        AckTimeout="100"
        ConnectionTimeout="100"
    />

    <!--  
        # Junior features an integrated informational and debugging logging system
        # that prints error and status information to the screen, or saves it in 
        # a log file.  If the "LogFileName" parameter is specified, all logging information
        # is written to the given file.  Otherwise, it's displayed in a text window.
        
        # Junior supports up to 5 levels of logging.  Each increase in logging level
        # records additional information, but may reduce performance.
        # The "LogMsgLevel" parameters must be set to one of the following values:
        #           0 = No logging
        #           1 = On errors only
        #           2 = Errors and start-up/shutdown status
        #           3 = Errors, start-up/shutdown, and warnings
        #           4 = Errors, start-up/shutdown, warnings, and limited debug
        #           5 = Full reporting: WARNING!  Very slow performance at this level!
        #
    -->
    <Log_Configuration
        LogFileName = ""
        LogMsgLevel = "3"    
    />
    
    <!-- 
        The following configuration parameters apply when the Jr RunTime Engine
        is started.  To change these values, the RTE will need to be stopped
        and restarted.
        
        # By default, Junior provides relay services to increase the scope of
        # wireless networks.  This service does use additional bandwidth, and
        # should be deactivated ( by setting AllowRelay to zero) 
        # in bandwidth limited situations.

        # The Junior RTE runs cyclically as a background application to ensure
        # smooth routing and delivery of messages.  To avoid overloading the CPU,
        # the period of executation can be adjusted by the "RTE_CycleTime" parameter.
        # This sleep time is measured in milliseconds.  A high value frees up more
        # system resources for other tasks, but increases the latency in the 
        # delivery of messages. 
        
        # By default, Jr is configured with UDP communication, and TCP and Serial
        # disabled.  This can be modified through the 'EnableUDPInterface', 
        # 'EnableTCPInterface' and 'NumSerialInterfaces' parameter.  Note that UDP
        # and TCP are both configured as on-or-off; Jr will automatically
        # detect all available network interface cards.  The 'NumSerialInterfaces'
        # parameter is the number of serial interfaces to configure, and should
        # correspond to the number of 'Serial_Configuration' elements
        # in this configuration file.
    -->
    <RTE_Configuration
        AllowRelay = "1"
        RTE_CycleTime = "1"
        EnableUDPInterface = "1"
        EnableTCPInterface = "0"
        NumSerialInterfaces = "0"
    />
    
    <!--
        The following configuration applies to the UDP interface used by Jr.
        # The MaxBufferSize denotes that maximum size, in bytes, of the send
        # and receive buffers for socket communication.  A large value
        # allows for large or frequent messages to be passed without
        # loss; however, more system resources are required.  If the middleware
        # is losing messages in a lossless network environment, increase
        # this value.
        
        # The UseOPC2.75_Header flag is maintained for backward compatibility with previous 
        # versions of JAUS.  A value of 1 replaces the JUDP header defined 
        # by SAE AS-5669 with the JAUS 2.75 OPC header (JAUS01.0) for all 
        # network communications.  The OPC format is not standard, however, 
        # and should be used with caution.
        
        # By default, Junior uses the port reserved for JAUS as assigned
        # by the IANA for all UDP traffic.  Changing the UDP_Port 
        # assignment is not recommended.
        
        # Junior implements broadcast through UDP multicast in order to 
        # provide limits on the proliferation of broadcast messages.  The Time
        # To Live, or TTL, can be set to limit the number of routers a broadcast
        # may pass through before it is restricted.  Increasing this value
        # will increase proliferation of a broadcast on a network.
        # Furthermore, Junior restricts broadcasts to a multicast IP address.  
        # This allows the systems engineer to create teams of systems that are
        # independent of each other.  Note that systems must have the same
        # multicast IP address if they are intended to interact.
    -->
    <UDP_Configuration
        
        UseOPC2.75_Header = "0"
        UDP_Port        = "3794"
        MulticastTTL    = "16"
        MulticastAddr   = "239.255.0.1"
        MaxBufferSize   = "70000"
    />
    
    <!-- 
        The following configuration applies to the TCP interface used by Jr.
        # Junior uses the TCP/IP port reserved for JAUS traffic as assigned by the IANA.  
        # Changing TCP_Port assignment is not recommended.
    -->
    <TCP_Configuration
        TCP_Port = "3794"
        MaxBufferSize   = "70000"
    />
    
    <!--
        The following configuration applies to a single Serial interface used by Jr.
        a 'Serial_Configuration' element should exist for each serial interface
        specified by the NumSerialInterfaces parameter defined above.
        
        For each serial interface, several parameters are required:
        
        # SerialPortName:  Set the name of the serial port for Junior to use.  
        #        For Windows, this is usually of the form "COMn" where n is a 
        #        number between 1 and 8.  For Linux, it's usually "ttySn" 
        #        where n is a number between 0 and 7.
        #
        # SerialBaudRate: Select the serial BAUD rate.
        #
        # SerialParity & SerialStopBits:
        #         Junior will use 8 bits for data transmission, and this
        #         value is not configurable.  The parity and number of stop bits is configurable,
        #         and must match the remote device settings to ensure data is not corrupted.
        #         By default, Junior uses no parity, and 1 stop bit.  This is often referred to
        #         as "8N1".  Parity may take the value of: even, odd, or none.  Stop bits may have
        #         a value of 1 or 2.  
        #
        # SerialSoftwareFlowControl:   Most implementations for RS-232 serial 
        #        ports make use of the RTS and CTS lines to signal when a remote 
        #        device is ready to write or receive data.  This is called hardware 
        #        flow control.  Alternatively, software flow control can be used, 
        #        but is much less efficient.  The following configuration item should
        #        only be enabled if hardware flow control is not supported on the 
        #        communication port.
    -->
    <Serial_Configuration
        SerialPortName = "com1"  
        SerialBaudRate = "19200"
        SerialParity = "none"
        SerialStopBits = "1"
        SerialSoftwareFlowControl = "0"
    />
  
  <!--
    For UDP and serial connections, Jr can automatically find other
    nodes to communicate with.  However, TCP connections do not 
    support such discovery.  The AddressBook allows a client to be
    preconfigured with a list of IDs and their associated ip address
    and port number.  All entries must be of the form:
        J<id number> = "<ip_address>:<port>"
        
    Note the preceeding "J" must be inserted before the integer ID.
 
    Example:
        J12345 = "192.168.1.2:3794"
        
        I create the AddressBook for COP : 42.1.1 ( 0x2A0101 = 2752769 ) and all other IPs
        You need set the COP to fix IPadress 192.168.1.42 and your robot to 192.168.1.1XX , 1XX is your subsystem ID
  -->
  <AddressBook
   J2752769=192.168.1.42:3794
   J6619393=192.168.1.101:3794
   J6684929=192.168.1.102:3794
   J6750465=192.168.1.103:3794
   J6816001=192.168.1.104:3794
   J6881537=192.168.1.105:3794
   J6947073=192.168.1.106:3794
   J7012609=192.168.1.107:3794
   J7078145=192.168.1.108:3794
   J7143681=192.168.1.109:3794
   J7209217=192.168.1.110:3794
   J7274753=192.168.1.111:3794
   J7340289=192.168.1.112:3794
   J7405825=192.168.1.113:3794
   J7471361=192.168.1.114:3794
   J7536897=192.168.1.115:3794
   J7602433=192.168.1.116:3794
   J7667969=192.168.1.117:3794
   J7733505=192.168.1.118:3794
   J7799041=192.168.1.119:3794
   J7864577=192.168.1.120:3794
   J7930113=192.168.1.121:3794
   J7995649=192.168.1.122:3794
   J8061185=192.168.1.123:3794
   J8126721=192.168.1.124:3794
   J8192257=192.168.1.125:3794
   J8257793=192.168.1.126:3794
   J8323329=192.168.1.127:3794
   J8388865=192.168.1.128:3794
   J8454401=192.168.1.129:3794
   J8519937=192.168.1.130:3794
  />
</JrConfigData>
